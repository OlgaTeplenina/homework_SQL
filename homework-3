--=============== МОДУЛЬ 3. ОСНОВЫ SQL =======================================
--= ПОМНИТЕ, ЧТО НЕОБХОДИМО УСТАНОВИТЬ ВЕРНОЕ СОЕДИНЕНИЕ И ВЫБРАТЬ СХЕМУ PUBLIC===========
SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Выведите для каждого покупателя его адрес проживания, 
--город и страну проживания.

select concat(last_name, ' ', first_name) as "Фамилия и имя", address as "Адрес", city as "Город", country as "Страна"
from customer 
inner join address on customer.address_id=address.address_id
inner join city on address.city_id=city.city_id 
inner join country on city.country_id=country.country_id 

--ЗАДАНИЕ №2
--С помощью SQL-запроса посчитайте для каждого магазина количество его покупателей.

select store_id as "ID магазина", count(customer_id) as "Количество покупателей"
from customer c 
group by store_id 


--Доработайте запрос и выведите только те магазины, 
--у которых количество покупателей больше 300-от.
--Для решения используйте фильтрацию по сгруппированным строкам 
--с использованием функции агрегации.

select store_id as "ID магазина", count(customer_id) as "Количество покупателей"
from customer c 
group by store_id 
having count(customer_id) > 300


-- Доработайте запрос, добавив в него информацию о городе магазина, 
--а также фамилию и имя продавца, который работает в этом магазине.

select "ID магазина", "Количество покупателей", c2.city as "Город магазина", s.last_name || s.first_name as "Фамилия и имя продавца" 
from
(select store_id as "ID магазина", count(customer_id) as "Количество покупателей"
from customer c 
group by store_id 
having count(customer_id) > 300) as d
inner join staff s on d."ID магазина" = s.store_id 
inner join store st on d."ID магазина" = st.store_id 
inner join address a on st.address_id = a.address_id 
inner join city c2 on a.city_id = c2.city_id 


--ЗАДАНИЕ №3
--Выведите ТОП-5 покупателей, 
--которые взяли в аренду за всё время наибольшее количество фильмов

select concat(c.last_name, ' ', c.first_name) as "Фамилия и имя", r.count 
from customer c
inner join 
    (select customer_id, count(customer_id)
    from rental 
    group by customer_id) as r on c.customer_id = r.customer_id 
order by r.count desc 
limit 5
    
--ЗАДАНИЕ №4
--Посчитайте для каждого покупателя 4 аналитических показателя:
--  1. количество фильмов, которые он взял в аренду
--  2. общую стоимость платежей за аренду всех фильмов (значение округлите до целого числа)
--  3. минимальное значение платежа за аренду фильма
--  4. максимальное значение платежа за аренду фильма

select concat(c.last_name, ' ', c.first_name) as "Фамилия и имя покупателя", count(i.film_id) as "Количество фильмов", ROUND(sum(p.amount)) as "Общая стоимость платежей", min(p.amount) as "Минимальная стоимость платежа", max(p.amount) as "Максимальная стоимость платежа"
from customer c 
inner join rental r on c.customer_id = r.customer_id 
inner join inventory i on r.inventory_id = i.inventory_id 
inner join payment p on r.rental_id = p.rental_id 
group by c.customer_id 


--ЗАДАНИЕ №5
--Используя данные из таблицы городов составьте одним запросом всевозможные пары городов таким образом,
 --чтобы в результате не было пар с одинаковыми названиями городов. 
 --Для решения необходимо использовать декартово произведение.
 
select c.city as "Город 1", s.city as "Город 2"
from city c 
cross join city s
where c.city != s.city


--ЗАДАНИЕ №6
--Используя данные из таблицы rental о дате выдачи фильма в аренду (поле rental_date)
--и дате возврата фильма (поле return_date), 
--вычислите для каждого покупателя среднее количество дней, за которые покупатель возвращает фильмы.
 
select customer_id as "ID покупателя", round(avg(return_date:: date - rental_date::date),2)
from rental
group by customer_id
order by customer_id


--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Посчитайте для каждого фильма сколько раз его брали в аренду и значение общей стоимости аренды фильма за всё время.

select title as "Название", rating as "Рейтинг", c.name "Жанр", release_year as "Год выпуска", l.name as "Язык", d.count as "Количество аренд", w.sum as "Общая стоимость аренды"
from film f
inner join language l on f.language_id = l.language_id 
inner join film_category fc on fc.film_id = f.film_id 
inner join category c on fc.category_id = c.category_id 
inner join 
 (select i.film_id, count(r.inventory_id)
 from rental r 
 inner join inventory i on r.inventory_id = i.inventory_id 
 group by film_id) as d 
 on d.film_id = f.film_id 
inner join 
 (select sum(p.amount), q.film_id
 from payment p 
 inner join 
  (select i.film_id, r.inventory_id, r.rental_id
   from rental r 
   inner join inventory i on r.inventory_id = i.inventory_id 
  ) as q
 on q.rental_id = p.rental_id 
 group by film_id) as w on w.film_id=f.film_id
order by title 
 

 
--ЗАДАНИЕ №2
--Доработайте запрос из предыдущего задания и выведите с помощью запроса фильмы, которые ни разу не брали в аренду.

select title as "Название", rating as "Рейтинг", c.name "Жанр", release_year as "Год выпуска", l.name as "Язык", d.count as "Количество аренд", w.sum as "Общая стоимость аренды"
from film f
inner join language l on f.language_id = l.language_id 
inner join film_category fc on fc.film_id = f.film_id 
inner join category c on fc.category_id = c.category_id 
left join 
 (select i.film_id, count(r.inventory_id)
 from rental r 
 inner join inventory i on r.inventory_id = i.inventory_id 
 group by film_id) as d 
 on d.film_id = f.film_id 
left join 
 (select sum(p.amount), q.film_id
 from payment p 
 inner join 
  (select i.film_id, r.inventory_id, r.rental_id
   from rental r 
   inner join inventory i on r.inventory_id = i.inventory_id 
  ) as q
 on q.rental_id = p.rental_id 
 group by film_id) as w on w.film_id=f.film_id
where d.count is null
order by title


--ЗАДАНИЕ №3
--Посчитайте количество продаж, выполненных каждым продавцом. Добавьте вычисляемую колонку "Премия".
--Если количество продаж превышает 7300, то значение в колонке будет "Да", иначе должно быть значение "Нет".

select staff_id as "ID сотрудника", count(payment_id) as "Количество продаж", 
    case
        when count(payment_id) > 7300 then 'Да'
        else 'Нет'
    end as "Премия"
from payment p 
group by staff_id 

