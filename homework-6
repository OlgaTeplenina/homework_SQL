--=============== МОДУЛЬ 6. POSTGRESQL =======================================

SET search_path TO public;

--======== ОСНОВНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Напишите SQL-запрос, который выводит всю информацию о фильмах 
--со специальным атрибутом "Behind the Scenes".


select film_id, title, special_features 
from film 
where special_features @> array ['Behind the Scenes'] 
order by film_id 

--ЗАДАНИЕ №2
--Напишите еще 2 варианта поиска фильмов с атрибутом "Behind the Scenes",
--используя другие функции или операторы языка SQL для поиска значения в массиве.


select film_id, title, special_features 
from film 
where array_position(special_features, 'Behind the Scenes') is not null
order by film_id 


select film_id, title, special_features 
from film 
where special_features && array ['Behind the Scenes']
order by film_id 


select film_id, title, special_features 
from film 
where special_features::text like '%Behind the Scenes%'
order by film_id

--ЗАДАНИЕ №3
--Для каждого покупателя посчитайте сколько он брал в аренду фильмов 
--со специальным атрибутом "Behind the Scenes.
--Обязательное условие для выполнения задания: используйте запрос из задания 1, 
--помещенный в CTE. CTE необходимо использовать для решения задания.


with cte as
    (select film_id, title, special_features 
     from film 
     where special_features @> array ['Behind the Scenes'] 
     order by film_id )
select customer_id, count (cte.film_id) as film_count
from rental r
inner join inventory i on r.inventory_id = i.inventory_id 
inner join cte on i.film_id = cte.film_id
group by customer_id
order by customer_id



--ЗАДАНИЕ №4
--Для каждого покупателя посчитайте сколько он брал в аренду фильмов
-- со специальным атрибутом "Behind the Scenes".
--Обязательное условие для выполнения задания: используйте запрос из задания 1,
--помещенный в подзапрос, который необходимо использовать для решения задания.


select customer_id, count (d.film_id) as film_count
from rental r
inner join inventory i on r.inventory_id = i.inventory_id 
inner join 
  (select film_id, title, special_features 
   from film 
   where special_features @> array ['Behind the Scenes'] 
   order by film_id ) d on i.film_id = d.film_id
group by customer_id
order by customer_id



--ЗАДАНИЕ №5
--Создайте материализованное представление с запросом из предыдущего задания
--и напишите запрос для обновления материализованного представления

CREATE materialized view  film_count as 
    select customer_id, count (d.film_id) as film_count
    from rental r
    inner join inventory i on r.inventory_id = i.inventory_id 
    inner join 
      (select film_id, title, special_features 
      from film 
      where special_features @> array ['Behind the Scenes'] 
      order by film_id ) d on i.film_id = d.film_id
   group by customer_id
   order by customer_id
with no data


refresh  materialized view  film_count


--ЗАДАНИЕ №6
--С помощью explain analyze проведите анализ скорости выполнения запросов
-- из предыдущих заданий и ответьте на вопросы:

--1. Каким оператором или функцией языка SQL, используемых при выполнении домашнего задания, 
--   поиск значения в массиве происходит быстрее

--                    cost     actual time
--  @>                92.25    0.512   
--  array_position    95.42    0.551
--  &&                92.25    0.484 
-- like               71.52    0.771

-- Поиск в массиве происходит быстрее при использовании функции &&

--2. какой вариант вычислений работает быстрее: 
--   с использованием CTE или с использованием подзапроса

--  (Подзапрос cost = 791.12, actual time = 6.551
--  (CTE       cost = 791.12, actual time = 6.361)

-- Запрос с использованием СTE происходит быстрее


--======== ДОПОЛНИТЕЛЬНАЯ ЧАСТЬ ==============

--ЗАДАНИЕ №1
--Выполняйте это задание в форме ответа на сайте Нетологии


--ЗАДАНИЕ №2
--Используя оконную функцию выведите для каждого сотрудника
--сведения о самой первой продаже этого сотрудника.

explain analyze -- 2230.38

with cte as  
    (select staff_id, amount, payment_date, customer_id, rental_id, row_number () over (partition by staff_id order by payment_date) 
    from payment p) 
select cte.staff_id, f.film_id, f.title, cte.amount, cte.payment_date, c.last_name as customer_last_name , c.first_name as customer_first_name
from cte
inner join customer c on cte.customer_id  = c.customer_id 
inner join rental r  using (rental_id)
inner join inventory i using (inventory_id) 
inner join film f using (film_id) 
where row_number = 1



explain analyze -- 1632.17

with cte as  
    (select staff_id, amount, payment_date, customer_id, rental_id, min (payment_date) over (partition by staff_id) 
    from payment p) 
select cte.staff_id, f.film_id, f.title, cte.amount, cte.payment_date, c.last_name as customer_last_name , c.first_name as customer_first_name
from cte
inner join customer c on cte.customer_id  = c.customer_id 
inner join rental r  using (rental_id)
inner join inventory i using (inventory_id) 
inner join film f using (film_id) 
where payment_date = min



explain analyze -- 2230.78

with cte as  
    (select staff_id, amount, payment_date, customer_id, rental_id, first_value(payment_date) over (partition by staff_id order by payment_date) 
    from payment p) 
select cte.staff_id, f.film_id, f.title, cte.amount, cte.payment_date, c.last_name as customer_last_name , c.first_name as customer_first_name
from cte
inner join customer c on cte.customer_id  = c.customer_id 
inner join rental r  using (rental_id)
inner join inventory i using (inventory_id) 
inner join film f using (film_id) 
where payment_date = first_value

--ЗАДАНИЕ №3
--Для каждого магазина определите и выведите одним SQL-запросом следующие аналитические показатели:
-- 1. день, в который арендовали больше всего фильмов (день в формате год-месяц-день)
-- 2. количество фильмов взятых в аренду в этот день
-- 3. день, в который продали фильмов на наименьшую сумму (день в формате год-месяц-день)
-- 4. сумму продажи в этот день



 select d.store_id, rental_date::date, max, payment_date::date, min
 from (  select s.store_id, rental_date::date, count(f.film_id), max (count(f.film_id)) over (partition by s.store_id)
         from rental r 
         inner join inventory i on  i.inventory_id = r.inventory_id
         inner join film f on  i.film_id = f.film_id
         inner join store s on  r.staff_id = s.manager_staff_id
         group by s.store_id, rental_date::date 
         order by s.store_id, rental_date::date ) d
inner join 
        ( select *
         from
          (select s.store_id, payment_date::date, sum(amount), min (sum(amount)) over (partition by store_id)
          from payment p
          inner join store s on  p.staff_id = s.manager_staff_id
          group by s.store_id, payment_date::date) t
          where sum =  min) b on d.store_id = b.store_id
where  count =  max    
